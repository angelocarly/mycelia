#version 450

layout ( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Node {
    vec4 p;
    ivec4 i;
};
layout(std430, binding = 0 ) buffer LocationsIn {
    Node nodes[];
} node_buffer_in;
layout(std430, binding = 1 ) buffer LocationsOut {
    Node nodes[];
} node_buffer_out;

/* A buffer with all nodes contained by the cells */
struct Ordering {
    int node_id;
    int cell_id;
};
layout(std430, binding = 2 ) buffer SpatialOrdering {
    Ordering lookup[];
} spatial_ordering;

/* Maps a cell-id to the respective nodes index, as well as element count */
struct CellLookup {
    int order_index;
};
layout(std430, binding = 3 ) buffer SpatialLookup {
    CellLookup cells[];
} spatial_lookup;

layout( push_constant ) uniform PushConstants
{
    int nodes;
    float repulsion;
} constants;

int cell_hash(ivec3 p) {
    int cell_id = 53 * p.x + 97 * p.y + 193 * p.z;
    return cell_id - ( 100000 * int(floor( cell_id / 100000. )));
}

ivec3 cell_index_world(vec3 p) {
    return ivec3(p * 0.5 / constants.repulsion);
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    int id = p.x;

    if( id >= constants.nodes ) return;

    vec3 force = vec3(0);
    Node n1 = node_buffer_in.nodes[id];

    ivec3 cell_pos = cell_index_world(n1.p.xyz);
    for( int x = -1; x <= 1; x++ )
    {
        for (int y = -1; y <= 1; y++)
        {
            for (int z = -1; z <= 1; z++)
            {
                int cell_id = cell_hash(ivec3(cell_pos.x + x, cell_pos.y + y, cell_pos.z + z ));

                int lookup_id = spatial_lookup.cells[cell_id].order_index;
                if( lookup_id == 9999999 ) continue; // No nodes in cell

                Ordering o = spatial_ordering.lookup[ lookup_id ];

                // Compare against elements in cell
                while( o.cell_id == cell_id )
                {
                    Node n2 = node_buffer_in.nodes[o.node_id];

                    vec3 diff = n2.p.xyz - n1.p.xyz;
                    float l = length(diff);
                    if( l >= 0.001 ) {
                        force -= normalize(diff) * 0.0000001 * constants.repulsion * constants.repulsion / (l * l);
                    }

                    lookup_id += 1;
                    o = spatial_ordering.lookup[ lookup_id ];
                }
            }
        }
    }

    force += -normalize(n1.p.xyz) * length(n1.p.xyz) * length(n1.p.xyz) * 0.01;

    if( length( n1.p.xyz + force ) > 1. ) {
        // node_buffer_out.nodes[id].p = vec4( normalize(n1.p.xyz + force) * .01, 0.);
        return;
    }
    vec4 new_pos = n1.p + vec4(force, 0);
    node_buffer_out.nodes[id].p = new_pos;

    // Calculate the cell index and store in the lookup table
    spatial_ordering.lookup[id] = Ordering(id, cell_hash(cell_index_world(new_pos.xyz)));
}