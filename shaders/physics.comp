#version 450

layout ( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Node {
    vec3 p;
    int i;
    vec3 v;
    float density;
};
layout(std430, binding = 0 ) buffer LocationsIn {
    Node nodes[];
} node_buffer_in;
layout(std430, binding = 1 ) buffer LocationsOut {
    Node nodes[];
} node_buffer_out;

layout( push_constant ) uniform PushConstants
{
    int nodes;
    float repulsion;
} constants;

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    int id = p.x;

    if( id >= constants.nodes ) return;

    vec3 force = vec3(0);
    Node n1 = node_buffer_in.nodes[id];

    vec3 diff = vec3(0);
    for( int i = 0; i < constants.nodes; i++ ) {
        diff = node_buffer_in.nodes[i].p - n1.p;
        float l2 = dot(diff, diff);
        if( l2 >= 0.0001 ) {
            force -= diff * 0.00001 * constants.repulsion * constants.repulsion / l2;
        }
    }

//    if( fl > 0.1 ) {
//        force = normalize(force) * 0.00001;
//    }

    float l = length(n1.p.xyz);
    force += -normalize(n1.p.xyz) * 0.007 * l;

    node_buffer_out.nodes[id].p = n1.p + force;
}