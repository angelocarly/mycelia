#version 450

layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;

struct Node {
    vec4 p;
    ivec4 i;
};
layout(std430, binding = 1 ) buffer Locations {
    Node nodes[];
} positions;

layout( push_constant ) uniform PushConstants
{
    mat4 transform;
    int nodes;
} constants;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

void circle( vec2 pos, float r, vec3 color ) {
    ivec2 p = ivec2(pos);
    for( float a = 0.0f; a < 2 * 3.14159f; a += 2 * 3.14159f / 190.0f ) {
        imageStore(image, p + ivec2(cos(a) * r, sin(a) * r), vec4(color, 1));
    }
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );

    if( p.x >= constants.nodes || p.y > 1 ) return;
    int id = p.x;

    vec4 pos = constants.transform * vec4( positions.nodes[id].p.xyz, 1.0);
    float d = pos.w;
    pos /= pos.w;

    pos.x *= screenSize.x;
    pos.y *= screenSize.y;
    pos.x += screenSize.x / 2.;
    pos.y += screenSize.y / 2.;

    float t = 1.;
    //float t = length(positions.nodes[id].p) * 20.;
    //vec3 color = palette(t, vec3(0.1, .3, .15), vec3(.3, .8, .1), vec3(.4, .1, .2), vec3(.1, .3, .2));
    vec3 color = vec3(1);
    if (positions.nodes[id].i.x == 1) {
        color = vec3(1, 1, 0);
        circle( pos.xy, 1. / d * 8., color);
        circle( pos.xy, 1. / d * 7., color);
        circle( pos.xy, 1. / d * 6., color);
        circle( pos.xy, 1. / d * 5., color);
        circle( pos.xy, 1. / d * 4., color);
    }

    circle( pos.xy, 1. / d * 10.5, color);
}